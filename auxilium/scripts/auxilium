#!/usr/bin/env python3
#
# functions to run automated test framework on POSIX systems
#
# 1. setting up the environment
# 2. running actual test scripts
# 3. clean up afterwards
#
# All steps can be run in a single task or be invoked individually
#
# required variables are TEST_FILE, PYPI_USR, PYPI_PWD and CC_TEST_REPORTER_ID

import logging
import pathlib
import sys
import os

from argparse import ArgumentParser, \
    ArgumentDefaultsHelpFormatter, SUPPRESS, OPTIONAL, ZERO_OR_MORE
from configparser import ConfigParser

from auxilium.setup_tools import create_project, create_venv, create_git, \
    commit_git, requirements, install, uninstall, cleanup as cleanup_setup

from auxilium.test_tools import unittests, doctests, quality, security, \
    coverage, profile, cleanup as cleanup_test

from auxilium.documentation_tools import api, html, doctest, latexpdf, \
    show, cleanup as cleanup_doc, quality as docquality

from auxilium.deployment_tools import docmaintain, build, deploy, \
    cleanup as cleanup_deploy

config = ConfigParser(allow_no_value=True)
config.read(pathlib.Path.home().joinpath('../../.aux/config'))
config.read('.aux/config')


class ArgumentDefaultsAndConstsHelpFormatter(ArgumentDefaultsHelpFormatter):

    def _get_help_string(self, action):
        action_help = action.help
        defaulting_nargs = [OPTIONAL, ZERO_OR_MORE]
        if action.default is not None and action.default is not SUPPRESS:
            if '%(default)' not in action.help:
                if action.option_strings or action.nargs in defaulting_nargs:
                    if 'pwd' in action.dest:
                        ast = '*' * len(action.default)
                        action_help += ' (default: %s)' % ast
                    else:
                        action_help += ' (default: %(default)s)'
        elif action.const is not None and action.const is not SUPPRESS:
            if '%(const)' not in action.help:
                action_help += ' (default value if flagged: %(const)s)'
        return action_help


epilog = \
    "if (default: True) a given flag turns its value to False. " + \
    "set default behavior in `~/.aux/config` and `./.aux/config`"

parser = ArgumentParser(epilog=epilog,
                        formatter_class=ArgumentDefaultsAndConstsHelpFormatter)

parser.add_argument(
    '-p', '--python',
    nargs='?',
    const=config.get('DEFAULT', 'python', fallback='.aux/venv/bin/python3'),
    default=config.get('DEFAULT', 'python', fallback='.aux/venv/bin/python3'),
    help='set path to python executable or virtual environment')

sub_parser = parser.add_subparsers(dest='command')

# === create ===
# incl. create virtenv

create = sub_parser.add_parser(
    'create',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help=create_project.__doc__)
create.add_argument(
    '-v', '--verbosity',
    default=config.getint('create', 'verbosity', fallback=logging.INFO),
    help='set logging level')
create.add_argument(
    '--name',
    default=config.get('create', 'author', fallback=None),
    help='project name')
create.add_argument(
    '--slogan',
    default=config.get('create', 'slogan', fallback=None),
    help='project slogan')
create.add_argument(
    '--author',
    default=config.get('create', 'author', fallback=None),
    help='project author')
create.add_argument(
    '--email',
    default=config.get('create', 'email', fallback=None),
    help='project email')
create.add_argument(
    '--git',
    action='store_const',
    const=not config.getboolean('create', 'git', fallback=True),
    default=config.getboolean('create', 'git', fallback=True),
    help=create_git.__doc__)
create.add_argument(
    '--venv',
    nargs='?',
    const=config.get('create', 'venv', fallback='.aux/venv/'),
    default=config.get('create', 'venv', fallback='.aux/venv/'),
    help=create_venv.__doc__)

# === update ===
# incl. install . and install requirements

update = sub_parser.add_parser(
    'update',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="keep project, repo and dependencies up-to-date")
update.add_argument(
    '-v', '--verbosity',
    default=config.getint('update', 'verbosity', fallback=logging.INFO),
    help='set logging level')
update.add_argument(
    '--commit',
    nargs='?',
    const=config.get('update', 'commit', fallback='commit (by auxilium)'),
    help=commit_git.__doc__)
update.add_argument(
    '--auto-add',
    action='store_const',
    const=not config.get('update', 'auto-add', fallback=False),
    default=config.get('update', 'auto-add', fallback=False),
    help='add all new files to `git` repo')
update.add_argument(
    '--requirements',
    action='store_const',
    const=not config.getboolean('update', 'requirements', fallback=False),
    default=config.getboolean('update', 'requirements', fallback=False),
    help=requirements.__doc__)
update.add_argument(
    '--install',
    action='store_const',
    const=not config.getboolean('update', 'install', fallback=False),
    default=config.getboolean('update', 'install', fallback=False),
    help=install.__doc__)
update.add_argument(
    '--uninstall',
    action='store_const',
    const=not config.getboolean('update', 'uninstall', fallback=False),
    default=config.getboolean('update', 'uninstall', fallback=False),
    help=uninstall.__doc__)
update.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('update', 'cleanup', fallback=False),
    default=config.getboolean('update', 'cleanup', fallback=False),
    help=cleanup_setup.__doc__)

# === test ==

testing = sub_parser.add_parser(
    'test',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="check project integrity by testing")
testing.add_argument(
    'path',
    nargs='?',
    default=config.get('test', 'path', fallback='test/'),
    help='path to directory where test are found')
testing.add_argument(
    '-v', '--verbosity',
    default=config.getint('test', 'verbosity', fallback=logging.INFO),
    help='set logging level')
testing.add_argument(
    '--commit',
    nargs='?',
    const=config.get('test', 'commit', fallback='commit (by auxilium)'),
    help='auto commit on successful test run')
testing.add_argument(
    '--unittests',
    action='store_const',
    const=not config.getboolean('test', 'unittests', fallback=True),
    default=config.getboolean('test', 'unittests', fallback=True),
    help=unittests.__doc__)
testing.add_argument(
    '--regtests',
    action='store_const',
    const=not config.getboolean('test', 'regtests', fallback=True),
    default=config.getboolean('test', 'regtests', fallback=True),
    help="run regression tests")
testing.add_argument(
    '--doctests',
    action='store_const',
    const=not config.getboolean('test', 'doctests', fallback=True),
    default=config.getboolean('test', 'doctests', fallback=True),
    help=doctests.__doc__)
testing.add_argument(
    '--coverage',
    action='store_const',
    const=not config.getboolean('test', 'coverage', fallback=False),
    default=config.getboolean('test', 'coverage', fallback=False),
    help=coverage.__doc__)
testing.add_argument(
    '--quality',
    action='store_const',
    const=not config.getboolean('test', 'quality', fallback=True),
    default=config.getboolean('test', 'quality', fallback=True),
    help=quality.__doc__)
testing.add_argument(
    '--security',
    action='store_const',
    const=not config.getboolean('test', 'security', fallback=True),
    default=config.getboolean('test', 'security', fallback=True),
    help=security.__doc__)
testing.add_argument(
    '--profile',
    nargs='?',
    const=config.get('test', 'profile', fallback='test/unittests.py'),
    help=profile.__doc__)
testing.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('test', 'cleanup', fallback=False),
    default=config.getboolean('test', 'cleanup', fallback=False),
    help=cleanup_test.__doc__)
testing.add_argument(
    '--reset',
    action='store_const',
    const=not config.getboolean('test', 'reset', fallback=False),
    default=config.getboolean('test', 'reset', fallback=False),
    help="clear regression data (WARNING: data could not be restored!)")

# === documentation ==

doc = sub_parser.add_parser(
    'doc',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="update project documentation using `sphinx`")
doc.add_argument(
    '-v', '--verbosity',
    default=config.getint('doc', 'verbosity', fallback=logging.INFO),
    help='set logging level')
doc.add_argument(
    '--api',
    action='store_const',
    const=not config.getboolean('doc', 'api', fallback=False),
    default=config.getboolean('doc', 'api', fallback=False),
    help=api.__doc__)
doc.add_argument(
    '--quality',
    action='store_const',
    const=not config.getboolean('doc', 'quality', fallback=True),
    default=config.getboolean('doc', 'quality', fallback=True),
    help=docquality.__doc__)
doc.add_argument(
    '--doctest',
    action='store_const',
    const=not config.getboolean('doc', 'doctest', fallback=True),
    default=config.getboolean('doc', 'doctest', fallback=True),
    help=doctest.__doc__)
doc.add_argument(
    '--html',
    action='store_const',
    const=not config.getboolean('doc', 'doctest', fallback=True),
    default=config.getboolean('doc', 'doctest', fallback=True),
    help=html.__doc__)
doc.add_argument(
    '--latexpdf',
    action='store_const',
    const=not config.getboolean('doc', 'latexpdf', fallback=False),
    default=config.getboolean('doc', 'latexpdf', fallback=False),
    help=latexpdf.__doc__)
doc.add_argument(
    '--show',
    action='store_const',
    const=not config.getboolean('doc', 'show', fallback=False),
    default=config.getboolean('doc', 'show', fallback=False),
    help=show.__doc__)
doc.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('doc', 'cleanup', fallback=False),
    default=config.getboolean('doc', 'cleanup', fallback=False),
    help=cleanup_doc.__doc__)

# === deploy ==

deployment = sub_parser.add_parser(
    'deploy',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="manage project deployment")
deployment.add_argument(
    '-v', '--verbosity',
    default=config.getint('deploy', 'verbosity', fallback=logging.INFO),
    help='set logging level')
deployment.add_argument(
    '--docmaintain',
    action='store_const',
    const=not config.getboolean('deploy', 'docmaintain', fallback=True),
    default=config.getboolean('deploy', 'docmaintain', fallback=True),
    help=docmaintain.__doc__)
deployment.add_argument(
    '--build',
    action='store_const',
    const=not config.getboolean('deploy', 'build', fallback=True),
    default=config.getboolean('deploy', 'build', fallback=True),
    help=build.__doc__)
deployment.add_argument(
    '--deploy',
    action='store_const',
    const=not config.getboolean('deploy', 'deploy', fallback=False),
    default=config.getboolean('deploy', 'deploy', fallback=False),
    help=deploy.__doc__ + '. requires pypi_usr and pypi_pwd')
deployment.add_argument(
    '--pypi_usr',
    default=config.get('deploy', 'pypi_usr', fallback=None),
    help='user on pypi.org')
deployment.add_argument(
    '--pypi_pwd',
    default=config.get('deploy', 'pypi_pwd', fallback=None),
    help='password/token on pypi.org')
deployment.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('deploy', 'cleanup', fallback=False),
    default=config.getboolean('deploy', 'cleanup', fallback=False),
    help=cleanup_deploy.__doc__)

full = sub_parser.add_parser(
    'full',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help='make full update, test, doc and deploy run')

pkg = os.path.basename(os.getcwd())
args = parser.parse_args()
# todo verbosity
if args.command == 'create':
    print(args)
    create_project(args.name, args.slogan, args.author, args.email)
    os.chdir(args.name)
    if args.git:
        create_git(args.name)
    if args.venv:
        create_venv(args.venv)
    sys.exit()

if args.command == 'update':
    print(args)
    if args.commit:
        commit_git(args.commit, args.auto_add)
    if args.requirements:
        requirements(args.python)
    if args.install:
        install(args.python)
    if args.uninstall:
        uninstall(pkg, args.python)
    if args.cleanup:
        cleanup_setup(args.python)
    sys.exit()

if args.command == 'test':
    print(args)
    res = list()
    if args.unittests:
        r = unittests(args.path, args.python)
        res.append(r)
    if args.regtests:
        raise NotImplementedError('there are no regtests.')
    if args.doctets:
        r = doctests(pkg, args.python)
        res.append(r)
    if args.quality:
        r = quality(pkg, args.python)
        res.append(r)
    if args.security:
        r = security(pkg, args.python)
        res.append(r)
    if args.profile:
        r = profile(args.profile, args.python)
        res.append(r)

    if args.commit:
        if all(res):
            commit_git(args.commit)
        else:
            logging.log(args.verbosity,
                        "Test missing or failed. Did not commit.")

    if args.cleanup:
        cleanup_test(args.path)
    if args.reset:
        raise NotImplementedError('there are no regtests.')
    sys.exit()

if args.command == 'doc':
    print(args)
    if args.api:
        api(pkg)
    if args.quality:
        docquality(pkg, args.python)
    if args.doctest:
        doctest()
    if args.html:
        html()
    if args.latexpdf:
        latexpdf()
    if args.latexpdf:
        latexpdf()
    if args.show:
        show()
    if args.cleanup:
        cleanup_doc()
    sys.exit()

if args.command == 'deploy':
    print(args)
    if args.docmaintain:
        docmaintain(pkg, os.getcwd())
    if args.build:
        build()
    if args.deplay:
        deploy(args.pypi_usr, args.pypi_pwd)
    if args.cleanup:
        cleanup_deploy()
    sys.exit()

if args.command == 'full':
    raise NotImplementedError()
