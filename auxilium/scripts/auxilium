#!/usr/bin/env python3
#
# functions to run automated test framework on POSIX systems
#
# 1. setting up the environment
# 2. running actual test scripts
# 3. clean up afterwards
#
# All steps can be run in a single task or be invoked individually

# todo:
#  - test git (commit, tag, push)
#  - test pypi
#  - windows support


import logging
import pathlib
import sys
import os

from argparse import ArgumentParser
from configparser import ConfigParser

from auxilium.argparse.formatter import ArgumentDefaultsAndConstsHelpFormatter
from auxilium.tools.setup_tools import create_project
from auxilium import argparse, methods

LEVELS = \
    logging.INFO, 0, logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR
Failure = Exception

config = ConfigParser(allow_no_value=True)
config.read(pathlib.Path.home().joinpath('.aux/config'))
config.read('.aux/config')

# ================================
# === add main argument parser ===
# ================================

epilog = \
    "if (default: True) a given flag turns its value to False. " + \
    "set default behavior in `~/.aux/config` and `./.aux/config`."

parser = ArgumentParser(
    epilog=epilog, formatter_class=ArgumentDefaultsAndConstsHelpFormatter)

parser.add_argument(
    '-v', '--verbosity',
    action='count',
    default=0,
    help='set logging level '
         '(-v=ALL, -vv=DEBUG, -vvv=INFO, -vvvv=WARNING, -vvvvv=ERROR) '
         '(default: INFO)')

venv = config.get('create', 'venv', fallback='.aux/venv/')
env = venv + 'bin/%s' % os.path.basename(sys.executable)
parser.add_argument(
    '-env',
    metavar='PATH',
    nargs='?',
    const=config.get('DEFAULT', 'python', fallback=None),
    default=config.get('DEFAULT', 'env', fallback=env),
    help='set path to python executable or virtual environment. '
         'to us system interpreter just use flag -e=')

parser.add_argument(
    '-z', '--exit-non-zero',
    action='count',
    default=0,
    help='exit with non zero return code of failure '
         '(-z for non zero return code, -zz for raising exceptions)')

parser.add_argument(
    '-demo',
    action='store_true',
    help='start demo to creating a repo')

# ===============================
# === add sub argument parser ===
# ===============================

sub_parser = parser.add_subparsers(dest='command')

# === create ===
sub_parser.add_parser(
    'create',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help=create_project.__doc__)

# === update ===
sub_parser.add_parser(
    'update',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="keep project, repo and dependencies up-to-date")

# === test ==
sub_parser.add_parser(
    'test',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="check project integrity by testing using `pytest`")

# === documentation ==
doc = sub_parser.add_parser(
    'doc',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="update project documentation using `sphinx`")

# === deploy ==
deployment = sub_parser.add_parser(
    'deploy',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="manage project deployment")

# === invoke python ==
sub_parser.add_parser(
    'python',
    epilog='Call python interpreter of virtual environment '
           '(Note: only some options are implemented)',
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="invoke (virtual environment) python")

# =================================
# === build sub argument parser ===
# =================================

for k, v in sub_parser.choices.items():
    method = getattr(argparse, k, None)
    method(v, config) if method else None

# ===============================
# === invoke parsed arguments ===
# ===============================

args = parser.parse_args()

if args.demo:
    cmd = ("rm -f -r auxilium_demo; "
           "auxilium create "
           "--name=auxilium_demo "
           "--slogan='a demo by auxilium'  "
           "--author=auxilium "
           "--email='sonntagsgesicht@icould.com' "
           "--url='https://github.com/sonntagsgesicht/auxilium;'")
    print(cmd)
    sys.exit(os.system(cmd))


verbosity = LEVELS[min(args.verbosity, len(LEVELS) - 1)]
log_format = '[%(asctime)s] %(levelname)-12.8s %(message)s'
if verbosity > logging.DEBUG:
    log_format = '%(message)s'
logging.basicConfig(level=verbosity, format=log_format)
logging.log(1, args)

method = getattr(methods, str(args.command), None)
path = os.getcwd()
pkg = os.path.basename(os.getcwd())
kwargs = vars(args)
kwargs['path'] = kwargs.get('path', path)
kwargs['pkg'] = kwargs.get('name', pkg)

if path not in sys.path:
    sys.path.append(path)

code = method(**kwargs) if method else 1
if code and args.exit_non_zero == 2:
    raise Failure('failure in %s' % args.command)
sys.exit((code and args.exit_non_zero) * 1)
