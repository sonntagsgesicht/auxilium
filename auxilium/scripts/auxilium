#!/usr/bin/env python3
#
# functions to run automated test framework on POSIX systems
#
# 1. setting up the environment
# 2. running actual test scripts
# 3. clean up afterwards
#
# All steps can be run in a single task or be invoked individually
#
# required variables are TEST_FILE, PYPI_USR, PYPI_PWD and CC_TEST_REPORTER_ID

import logging
import pathlib
import sys
import os

from argparse import ArgumentParser, \
    ArgumentDefaultsHelpFormatter, SUPPRESS, OPTIONAL, ZERO_OR_MORE
from configparser import ConfigParser

from auxilium.setup_tools import create_project
from auxilium.git_tools import create_git, commit_git
from auxilium.pip_tools import requirements, install, uninstall, \
    cleanup as cleanup_site_packages, upgrade

from auxilium.test_tools import unittests, quality, security, \
    coverage, cleanup as cleanup_test, doctests

from auxilium.sphinx_tools import api, html, doctest, show, \
    cleanup as cleanup_doc

from auxilium.deployment_tools import docmaintain, build, \
    cleanup as cleanup_build

from auxilium.pypi_tools import deploy

from auxilium.system_tools import create_venv, system

config = ConfigParser(allow_no_value=True)
config.read(pathlib.Path.home().joinpath('../../.aux/config'))
config.read('.aux/config')


class ArgumentDefaultsAndConstsHelpFormatter(ArgumentDefaultsHelpFormatter):

    def _get_help_string(self, action):
        action_help = action.help
        defaulting_nargs = [OPTIONAL, ZERO_OR_MORE]
        if action.default is not None and action.default is not SUPPRESS:
            if '%(default)' not in action.help:
                if action.option_strings or action.nargs in defaulting_nargs:
                    if 'pwd' in action.dest:
                        ast = '*' * len(action.default)
                        action_help += ' (default: %s)' % ast
                    else:
                        action_help += ' (default: %(default)s)'
        elif action.const is not None and action.const is not SUPPRESS:
            if '%(const)' not in action.help:
                action_help += ' (default value if flagged: %(const)s)'
        return action_help


epilog = \
    "if (default: True) a given flag turns its value to False. " + \
    "set default behavior in `~/.aux/config` and `./.aux/config`."
command_epilog = epilog

parser = ArgumentParser(epilog=epilog,
                        formatter_class=ArgumentDefaultsAndConstsHelpFormatter)

parser.add_argument(
    '-e', '--env',
    nargs='?',
    const=config.get('DEFAULT', 'python', fallback='.aux/venv/bin/python3'),
    default=config.get('DEFAULT', 'python', fallback='.aux/venv/bin/python3'),
    help='set path to python executable or virtual environment')

sub_parser = parser.add_subparsers(dest='command')

# === create ===

create = sub_parser.add_parser(
    'create',
    epilog=command_epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help=create_project.__doc__)
create.add_argument(
    '-v', '--verbosity',
    type=int,
    default=config.getint('create', 'verbosity', fallback=logging.INFO),
    help='set logging level')
create.add_argument(
    '--name',
    default=config.get('create', 'author', fallback=None),
    help='project name')
create.add_argument(
    '--slogan',
    default=config.get('create', 'slogan', fallback=None),
    help='project slogan')
create.add_argument(
    '--author',
    default=config.get('create', 'author', fallback=None),
    help='project author')
create.add_argument(
    '--email',
    default=config.get('create', 'email', fallback=None),
    help='project email')
create.add_argument(
    '--venv',
    nargs='?',
    const=config.get('create', 'venv', fallback='.aux/venv/'),
    default=config.get('create', 'venv', fallback='.aux/venv/'),
    help=create_venv.__doc__)

# === update ===
# incl. install . and install requirements

update = sub_parser.add_parser(
    'update',
    epilog=command_epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="keep project, repo and dependencies up-to-date")
update.add_argument(
    '-v', '--verbosity',
    type=int,
    default=config.getint('update', 'verbosity', fallback=logging.INFO),
    help='set logging level')
update.add_argument(
    '--docmaintain',
    action='store_const',
    const=not config.getboolean('update', 'docmaintain', fallback=True),
    default=config.getboolean('update', 'docmaintain', fallback=True),
    help=docmaintain.__doc__)
update.add_argument(
    '--commit',
    nargs='?',
    const=config.get('update', 'commit', fallback='commit (by auxilium)'),
    help=commit_git.__doc__)
update.add_argument(
    '--add',
    nargs='?',
    const=config.get('update', 'add', fallback='--all'),
    help='add these new files to `git` repo')
update.add_argument(
    '--requirements',
    action='store_const',
    const=not config.getboolean('update', 'requirements', fallback=True),
    default=config.getboolean('update', 'requirements', fallback=True),
    help=requirements.__doc__)
update.add_argument(
    '--install',
    action='store_const',
    const=not config.getboolean('update', 'install', fallback=True),
    default=config.getboolean('update', 'install', fallback=True),
    help=install.__doc__)
update.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('update', 'cleanup', fallback=False),
    default=config.getboolean('update', 'cleanup', fallback=False),
    help=cleanup_site_packages.__doc__)

# === test ==

testing = sub_parser.add_parser(
    'test',
    epilog=command_epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="check project integrity by testing")
testing.add_argument(
    'path',
    nargs='?',
    default=config.get('test', 'path', fallback='test/'),
    help='path to directory where test are found')
testing.add_argument(
    '-v', '--verbosity',
    type=int,
    default=config.getint('test', 'verbosity', fallback=logging.INFO),
    help='set logging level')
testing.add_argument(
    '--commit',
    nargs='?',
    const=config.get('test', 'commit', fallback='commit (by auxilium)'),
    help='auto commit on successful test run')
testing.add_argument(
    '--doctest',
    action='store_const',
    const=not config.getboolean('test', 'doctest', fallback=True),
    default=config.getboolean('test', 'doctest', fallback=True),
    help=coverage.__doc__)
testing.add_argument(
    '--coverage',
    action='store_const',
    const=not config.getboolean('test', 'coverage', fallback=True),
    default=config.getboolean('test', 'coverage', fallback=True),
    help=coverage.__doc__)
testing.add_argument(
    '--quality',
    action='store_const',
    const=not config.getboolean('test', 'quality', fallback=True),
    default=config.getboolean('test', 'quality', fallback=True),
    help=quality.__doc__)
testing.add_argument(
    '--security',
    action='store_const',
    const=not config.getboolean('test', 'security', fallback=True),
    default=config.getboolean('test', 'security', fallback=True),
    help=security.__doc__)
testing.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('test', 'cleanup', fallback=False),
    default=config.getboolean('test', 'cleanup', fallback=False),
    help=cleanup_test.__doc__)
testing.add_argument(
    '--reset',
    action='store_const',
    const=not config.getboolean('test', 'reset', fallback=False),
    default=config.getboolean('test', 'reset', fallback=False),
    help="clear regression data (WARNING: data could not be restored!)")

# === documentation ==

doc = sub_parser.add_parser(
    'doc',
    epilog=command_epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="update project documentation using `sphinx`")
doc.add_argument(
    '-v', '--verbosity',
    type=int,
    default=config.getint('doc', 'verbosity', fallback=logging.INFO),
    help='set logging level')
doc.add_argument(
    '--commit',
    nargs='?',
    const=config.get('doc', 'commit', fallback='commit (by auxilium)'),
    help='auto commit on successful test run')
doc.add_argument(
    '--api',
    action='store_const',
    const=not config.getboolean('doc', 'api', fallback=False),
    default=config.getboolean('doc', 'api', fallback=False),
    help=api.__doc__)
doc.add_argument(
    '--doctest',
    action='store_const',
    const=not config.getboolean('doc', 'doctest', fallback=True),
    default=config.getboolean('doc', 'doctest', fallback=True),
    help=doctest.__doc__)
doc.add_argument(
    '--html',
    action='store_const',
    const=not config.getboolean('doc', 'doctest', fallback=True),
    default=config.getboolean('doc', 'doctest', fallback=True),
    help=html.__doc__)
# doc.add_argument(
#     '--latexpdf',
#     action='store_const',
#     const=not config.getboolean('doc', 'latexpdf', fallback=False),
#     default=config.getboolean('doc', 'latexpdf', fallback=False),
#     help=latexpdf.__doc__)
doc.add_argument(
    '--show',
    action='store_const',
    const=not config.getboolean('doc', 'show', fallback=False),
    default=config.getboolean('doc', 'show', fallback=False),
    help=show.__doc__)
doc.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('doc', 'cleanup', fallback=False),
    default=config.getboolean('doc', 'cleanup', fallback=False),
    help=cleanup_doc.__doc__)

# === deploy ==

deployment = sub_parser.add_parser(
    'deploy',
    epilog=command_epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help="manage project deployment")
deployment.add_argument(
    '-v', '--verbosity',
    type=int,
    default=config.getint('deploy', 'verbosity', fallback=logging.INFO),
    help='set logging level')
deployment.add_argument(
    '--docmaintain',
    action='store_const',
    const=not config.getboolean('deploy', 'docmaintain', fallback=True),
    default=config.getboolean('deploy', 'docmaintain', fallback=True),
    help=docmaintain.__doc__)
deployment.add_argument(
    '--build',
    action='store_const',
    const=not config.getboolean('deploy', 'build', fallback=True),
    default=config.getboolean('deploy', 'build', fallback=True),
    help=build.__doc__)
deployment.add_argument(
    '--deploy',
    action='store_const',
    const=not config.getboolean('deploy', 'deploy', fallback=False),
    default=config.getboolean('deploy', 'deploy', fallback=False),
    help=deploy.__doc__ + '. requires pypi_usr and pypi_pwd')
deployment.add_argument(
    '--pypi_usr',
    default=config.get('deploy', 'pypi_usr', fallback=None),
    help='user on pypi.org')
deployment.add_argument(
    '--pypi_pwd',
    default=config.get('deploy', 'pypi_pwd', fallback=None),
    help='password/token on pypi.org')
deployment.add_argument(
    '--cleanup',
    action='store_const',
    const=not config.getboolean('deploy', 'cleanup', fallback=False),
    default=config.getboolean('deploy', 'cleanup', fallback=False),
    help=cleanup_build.__doc__)

full = sub_parser.add_parser(
    'full',
    epilog=epilog,
    formatter_class=ArgumentDefaultsAndConstsHelpFormatter,
    help='make full update, test, doc and deploy run')
for k in sub_parser.choices:
    if k not in ('create', 'full'):
        full._actions.extend(
            a for a in sub_parser.choices[k]._actions if not a.dest == 'help')

root = os.getcwd()
pkg = os.path.basename(root)
args = parser.parse_args()

if hasattr(args, 'verbosity'):
    log_format = '[%(asctime)s] %(levelname)-12.8s %(message)s'
    if args.verbosity > logging.DEBUG:
        log_format = '%(levelname)-8.8s %(message)s'
    logging.basicConfig(level=args.verbosity, format=log_format)
    logging.log(0, args)

if args.command == 'create':
    create_project(args.name, args.slogan, args.author, args.email, path=root)
    os.chdir(args.name)
    path = os.path.join(root, args.name)
    create_git(path)
    create_venv(args.name, args.venv, path=path)
    sys.exit()

if args.command in ('update', 'full'):
    if args.cleanup:
        upgrade(args.env)
        cleanup_site_packages(args.env)
        uninstall(pkg, args.env)
    else:
        if args.docmaintain:
            docmaintain(pkg, root)
        if args.commit:
            commit_git(args.commit, args.add)
        if args.requirements:
            upgrade(args.env)
            requirements(args.env)
        if args.install:
            upgrade(args.env)
            install(args.env)
    sys.exit()

if args.command in ('test', 'full'):
    res = list()
    if args.path:
        res.append(unittests(args.path, args.env))
        if args.coverage:
            res.append(coverage(pkg, args.path, args.env))
    if args.doctest:
        res.append(doctests(pkg, args.env))
    if args.quality:
        res.append(quality(pkg, args.env))
    if args.security:
        res.append(security(pkg, args.env))
    if args.commit:
        if all(res):
            commit_git(args.commit)
        else:
            logging.log(logging.INFO,
                        "Test missing or failed. Did not commit.")
    if args.cleanup:
        cleanup_test(args.path)
    sys.exit()

if args.command in ('doc', 'full'):
    res = list()
    if args.api:
        res.append(api(pkg, args.env))
    if args.doctest:
        res.append(doctest(args.env))
    if args.html:
        res.append(html(args.env))
    # if args.latexpdf:
    #     res.append(latexpdf(args.env))
    if args.show:
        res.append(show(args.env))
    if args.commit:
        if all(res):
            commit_git(args.commit)
        else:
            logging.log(logging.INFO,
                        "Failed to build docs or missing. Did not commit.")
    if args.cleanup:
        cleanup_doc(args.env)
    sys.exit()


if args.command in ('deploy', 'full'):
    if args.docmaintain:
        docmaintain(pkg, root)
    if args.build:
        build()
    if args.deploy:
        deploy(args.pypi_usr, args.pypi_pwd)
    if args.cleanup:
        cleanup_build()
    sys.exit()
